/*Query all columns for all American cities in CITY with populations larger than 100000. The CountryCode for America is USA. */
SELECT * FROM CITY WHERE COUNTRYCODE='USA' AND POPULATION > 100000

/*Query the names of all American cities in CITY with populations larger than 120000. The CountryCode for America is USA. */
SELECT NAME FROM CITY WHERE COUNTRYCODE ='USA' AND POPULATION > 120000

/*Query all columns (attributes) for every row in the CITY table.*/
SELECT * FROM CITY

/*Query all columns for a city in CITY with the ID 1661.*/
SELECT * FROM CITY WHERE ID='1661'

/*Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.*/
SELECT * FROM CITY WHERE COUNTRYCODE='JPN'

/*Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.*/
SELECT NAME FROM CITY WHERE COUNTRYCODE='JPN'

/*Query a list of CITY and STATE from the STATION table.*/
SELECT CITY, STATE FROM STATION

/*Query a list of CITY names from STATION with even ID numbers only. You may print the results in any order, but must exclude duplicates from your answer.*/
SELECT DISTINCT CITY FROM STATION WHERE ID%2=0

/*Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.*/
SELECT COUNT(CITY)-COUNT(DISTINCT CITY) AS DIFF FROM STATION 

/*Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.*/
SELECT MIN(CITY), LENGTH(MIN(CITY))
FROM STATION
WHERE LENGTH(CITY) = (SELECT MIN(LENGTH(CITY)) FROM STATION) ;
SELECT MAX(CITY), LENGTH(MAX(CITY)) 
FROM STATION 
WHERE LENGTH(CITY) = (SELECT MAX(LENGTH(CITY)) FROM STATION);

OR
SELECT CITY, LENGTH(CITY)
FROM STATION
ORDER BY LENGTH(CITY) DESC, CITY ASC LIMIT 1;
                                
SELECT CITY, LENGTH(CITY) 
FROM STATION 
ORDER BY LENGTH(CITY) ASC, CITY ASC LIMIT 1;

/*Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.*/
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP "^[aeiou].*"

OR
SELECT DISTINCT CITY
FROM STATION
WHERE substring(city,1,1) IN ('a','e','i','o','u')

/*Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.*/
SELECT DISTINCT CITY
FROM STATION
WHERE substring(city,-1,1) IN ('a','e','i','o','u')

/*Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.*/
SELECT DISTINCT CITY
FROM STATION
WHERE SUBSTR(CITY,1,1) IN ('a','e','i','o','u') and substr(CITY,-1,1) IN ('a','e','i','o','u');

/*Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.*/
SELECT DISTINCT CITY
FROM STATION
WHERE SUBSTR(CITY,1,1) NOT IN ('a','e','i','o','u');

/*Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.*/
SELECT DISTINCT CITY
FROM STATION
WHERE SUBSTR(CITY,-1,1) NOT IN ('a','e','i','o','u');

/*Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.*/
SELECT DISTINCT CITY
FROM STATION
WHERE SUBSTR(CITY,1,1) NOT IN ('a','i','u','e','o') AND SUBSTR(CITY,-1,1)NOT IN ('a','i','u','e','o')

/*Query the Name of any student in STUDENTS who scored higher than Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.*/
SELECT NAME
FROM STUDENTS
WHERE MARKS > 75 
ORDER BY SUBSTR(NAME,-3,3) ASC, ID ASC;

/*Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.*/
SELECT NAME
FROM EMPLOYEE
ORDER BY NAME ASC

/*Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than per month who have been employees for less than months. Sort your result by ascending employee_id.*/
SELECT NAME
FROM EMPLOYEE
WHERE SALARY > 2000 AND MONTHS <10
ORDER BY  EMPLOYEE_ID

/*Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer. Note: CITY.CountryCode and COUNTRY.Code are matching key columns.*/
SELECT COUNTRY.CONTINENT, FLOOR(AVG(CITY.POPULATION)) 
FROM COUNTRY, CITY
WHERE CITY.COUNTRYCODE=COUNTRY.CODE
GROUP BY COUNTRY.CONTINENT

/*Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
Equilateral: It's a triangle with 3 sides of equal length.
Isosceles: It's a triangle with 2 sides of equal length.
Scalene: It's a triangle with 3 sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.
*/
SELECT IF(A+B>C AND A+C>B AND B+C>A, 
          IF(A=B AND B=C, 'Equilateral', 
             IF(A=B OR B=C OR A=C, 'Isosceles', 'Scalene')), 'Not A Triangle') 
FROM TRIANGLES;

